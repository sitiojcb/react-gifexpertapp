{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","valor","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","style","backgroundImage","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iPAmCeA,MAhCf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAmBtC,OACE,0BAAMC,SATe,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEtCN,EAAc,OAKlB,2BAAOO,KAAK,OACZC,MAAOT,EACPU,SAlBsB,SAACP,GACnB,IAAMQ,EAAQR,EAAES,OAAOH,MAE3BR,EAAcU,Q,uBCXTE,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAdO,kBAgBZA,GAhBY,4CAAH,sDCGPS,G,KAAc,SAAC,GAAsB,IAArBN,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAa,QAAQC,IAAI,CAACL,KAAGC,QAAMV,QAGlB,yBAAKgB,UAAU,4CACX,yBAAKA,UAAU,gBAAgBC,MAC3B,CAAEC,gBAAgB,QAAD,OAAWlB,EAAX,SAGrB,2BAAIU,MCaDS,MArBf,YAA8B,IAAZrB,EAAW,EAAXA,SAAW,ECFD,SAACA,GAAc,IAAD,EACZf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAqBtC,OAhBAC,qBAAU,WACN1B,EAAQC,GACP0B,MAAK,SAAAC,GAIEH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAMtB,CAACtB,IAEGuB,EDjBwBK,CAAa5B,GAAhCa,EAFa,EAElBN,KAAae,EAFK,EAELA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,yCAAyClB,GACtDsB,GAAW,uBAAGJ,UAAU,mCAAb,cAClB,yBAAKA,UAAU,aAETL,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eAAamB,IAAKnB,EAAIC,IAClBD,UEWHoB,MAxBf,WAAyB,IAAD,EAEgB7C,mBAAS,CAAC,cAF1B,mBAEb8C,EAFa,KAED/C,EAFC,KAItB,OACE,oCACE,wBAAIkC,UAAU,UAAd,kBACA,2BAAOA,UAAU,UAAjB,cACA,kBAAC,EAAD,CAAalC,cAAeA,IAC5B,6BAEA,4BAEM+C,EAAWtB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACA6B,IAAK7B,EACLA,SAAUA,UCfxBgC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,W","file":"static/js/main.8250421d.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\n// en lugar de mandar props desde GifExpertApp, desestructuramos el setInputValue\r\nfunction AddCategory({ setCategories }) {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n//recordar que si no pongo nada da error undefined!!!\r\n\r\n    const handleInputChange = (e) => {\r\n            const valor = e.target.value;\r\n            //console.log(valor);\r\n        setInputValue(valor)\r\n        }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats])\r\n            //reseteo el valor agregado\r\n            setInputValue('')\r\n        }\r\n    }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n        <input type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        />\r\n    </form>\r\n  )\r\n}\r\n        AddCategory.propTypes = {\r\n            setCategories: PropTypes.func.isRequired\r\n        }\r\n// \r\nexport default AddCategory","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=3jSX0TttTLhmjW4IgVEDkkFuB2nT63ms`;\r\n\r\n    //const url = '';\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    //console.log(data);\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    console.log(gifs);\r\n    //setImages(gifs);//comenta ahora fuera del componente usa\r\n    return gifs;\r\n}","import React from 'react'\r\nimport 'animate.css';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    //console.log(props)\r\n    console.log({id,title,url})\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__zoomInUp'>\r\n            <div className=\"img-container\" style={ \r\n                { backgroundImage: `url(\"${ url }\")` }\r\n             }>\r\n            </div>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport 'animate.css';\r\n\r\nfunction GifGrid({category}) {\r\n    \r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n      <>\r\n          <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n          {loading && <p className=\"animate_animated animate__flash\">Loading...</p>}\r\n    <div className='card-grid'>\r\n      {\r\n          images.map(img => (\r\n              <GifGridItem key={img.id}\r\n              {...img} />\r\n          ))\r\n        }\r\n      \r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifGrid","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(imgs => {\r\n\r\n            // setTimeout(() => {\r\n              //  console.log(imgs)\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            // }, 3000);\r\n\r\n        })\r\n       \r\n    }, [category])\r\n\r\n    return state; //que es data y loading\r\n}","import React, { useState } from \"react\"\r\nimport AddCategory from \"./components/AddCategory\"\r\nimport GifGrid from './components/GifGrid'\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"titulo\">Gif Expert App</h2>\r\n      <small className=\"buscar\">Buscar gif</small>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr/>\r\n      \r\n      <ol>\r\n          {\r\n            categories.map(category => (\r\n              <GifGrid \r\n              key={category}\r\n              category={category} />\r\n            ))\r\n          }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n\n  <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}